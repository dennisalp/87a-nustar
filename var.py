'''
2020-08-17, Dennis Alp, dalp@kth.se

Extract fluxes from XSPEC logs and make light curves.
'''

from __future__ import division, print_function
import os
from pdb import set_trace as db
import sys
from glob import glob
import time
from datetime import date
from datetime import timedelta
from tqdm import tqdm

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as md
from astropy.coordinates import SkyCoord
from astropy.wcs import WCS
from astropy.io import fits
from astropy import units
from astropy.time import Time

#For LaTeX style font in plots
plt.rc('font', **{'family': 'serif', 'serif': ['Computer Modern']})
plt.rc('text', usetex=True)

# Constants, cgs
cc = 2.99792458e10 # cm s-1
GG = 6.67259e-8 # cm3 g-1 s-2
hh = 6.6260755e-27 # erg s
DD = 51.2 # kpc
pc = 3.086e18 # cm
kpc = 3.086e21 # cm
mpc = 3.086e24 # cm
kev2erg = 1.60218e-9 # erg keV-1
Msun = 1.989e33 # g
Lsun = 3.828e33 # erg s-1
Rsun = 6.957e10 # cm
Tsun = 5772 # K
uu = 1.660539040e-24 # g
SBc = 5.670367e-5 # erg cm-2 K-4 s-1
kB = 1.38064852e-16 # erg K-1
mp = 1.67262192369e-24 # g


################################################################


# Days for scaling
SNDATE = date(1987, 2, 23)
def get_yrs(dd):
    return (date(dd[0], dd[1], dd[2])-SNDATE).days

def d2yr(d):
    d = SNDATE+timedelta(d)
    y = d.year
    r = (d-date(y, 1, 1)).total_seconds()
    return y + r/(date(y+1, 1, 1)-date(y, 1, 1)).total_seconds()

def yr2d(y):
    ye = int(y)
    r = y - ye
    b = date(ye, 1, 1)
    b += timedelta(seconds=np.ceil((b.replace(year=b.year+1)-b).total_seconds()*r))
    return (b-SNDATE).days



################################################################
# Parameters
dates = {
    'g1': [2012,  9, 10],
    'g2': [2012, 10, 21],
    'g3': [2012, 12, 12],
    'g4': [2013,  6, 29],
    'g5': [2014,  4, 22],
    'g6': [2014,  6, 17],
    'g7': [2014,  8,  1],
    'g8': [2020,  5, 20]
    }

dates = {    
    '40001014002A01': [2012,  9,  7],
    '40001014003A01': [2012,  9,  8],
    '40001014004A01': [2012,  9, 11],
    '40001014006A01': [2012, 10, 20],
    '40001014007A01': [2012, 10, 21],
    '40001014009A01': [2012, 12, 12],
    '40001014010A01': [2012, 12, 12+1], # Just shift so error bars can be seen
    '40001014015A01': [2014,  4, 21],
    '40001014016A01': [2014,  4, 22],
    '40001014018A01': [2014,  6, 15],
    '40001014020A01': [2014,  6, 19],
    '40001014022A01': [2014,  8,  1],
    '40001014023A01': [2014,  8,  1+1],
    '40001014002B01': [2012,  9,  7],
    '40001014003B01': [2012,  9,  8],
    '40001014004B01': [2012,  9, 11],
    '40001014006B01': [2012, 10, 20],
    '40001014007B01': [2012, 10, 21],
    '40001014009B01': [2012, 12, 12],
    '40001014010B01': [2012, 12, 12+1],
    '40001014015B01': [2014,  4, 21],
    '40001014016B01': [2014,  4, 22],
    '40001014018B01': [2014,  6, 15],
    '40001014020B01': [2014,  6, 19],
    '40001014022B01': [2014,  8,  1],
    '40001014023B01': [2014,  8,  1+1]
    }

    
c0, c1, c2, c3, c4, c5, c6, c7, c8, c9 = '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'


cts = {
       '40001014002A01': [1.201e-02, 4.438e-04, 96.3],
       '40001014002B01': [1.113e-02, 4.360e-04, 93.0],
       '40001014003A01': [1.302e-02, 3.304e-04, 96.3],
       '40001014003B01': [1.229e-02, 3.285e-04, 92.5],
       '40001014004A01': [1.280e-02, 2.711e-04, 96.3],
       '40001014004B01': [1.312e-02, 2.793e-04, 93.5],
       '40001014006A01': [1.356e-02, 5.363e-04, 96.1],
       '40001014006B01': [1.277e-02, 5.265e-04, 94.1],
       '40001014007A01': [1.413e-02, 2.845e-04, 96.5],
       '40001014007B01': [1.467e-02, 2.928e-04, 94.8],
       '40001014009A01': [9.455e-03, 6.127e-04, 95.6],
       '40001014009B01': [1.081e-02, 6.702e-04, 91.6],
       '40001014010A01': [1.439e-02, 2.984e-04, 96.0],
       '40001014010B01': [1.341e-02, 2.921e-04, 93.7],
       '40001014015A01': [1.381e-02, 4.079e-04, 95.7],
       '40001014015B01': [1.479e-02, 4.256e-04, 94.3],
       '40001014016A01': [1.514e-02, 2.011e-04, 95.7],
       '40001014016B01': [1.522e-02, 2.042e-04, 93.7],
       '40001014018A01': [1.423e-02, 2.863e-04, 95.5],
       '40001014018B01': [1.353e-02, 2.826e-04, 93.3],
       '40001014020A01': [1.482e-02, 2.479e-04, 96.0],
       '40001014020B01': [1.395e-02, 2.434e-04, 94.1],
       '40001014022A01': [1.447e-02, 5.921e-04, 95.5],
       '40001014022B01': [1.330e-02, 5.766e-04, 92.6],
       '40001014023A01': [1.543e-02, 2.027e-04, 96.5],
       '40001014023B01': [1.377e-02, 1.943e-04, 94.1]       
}
    
# Date       Time     Obs. ID     Offset
# 2012-09-07 20:41:07 40001014002 4.036
# 2012-09-08 22:34:07 40001014003 2.749
# 2012-09-11 02:16:07 40001014004 2.126
# 2012-10-20 18:50:07 40001014006 2.039
# 2012-10-21 19:06:07 40001014007 1.097
# 2012-12-12 03:21:07 40001014009 1.052
# 2012-12-12 17:16:07 40001014010 1.890
# 2013-06-28 18:51:07 40001014012 2.787
# 2013-06-29 01:16:07 40001014013 1.618
# 2014-04-21 11:16:07 40001014015 0.772
# 2014-04-22 21:06:07 40001014016 1.933
# 2014-06-15 10:26:07 40001014018 3.013
# 2014-06-19 21:01:07 40001014020 1.616
# 2014-08-01 07:36:07 40001014022 2.915
# 2014-08-01 23:46:07 40001014023 1.466
# 2020-05-13 23:16:09 40501004002 2.147
# 2020-05-27 09:16:09 40501004004 2.244

off = {
       '40001014002': 4.036,
       '40001014003': 2.749,
       '40001014004': 2.126,
       '40001014006': 2.039,
       '40001014007': 1.097,
       '40001014009': 1.052,
       '40001014010': 1.890,
       '40001014015': 0.772,
       '40001014016': 1.933,
       '40001014018': 3.013,
       '40001014020': 1.616,
       '40001014022': 2.915,
       '40001014023': 1.466
}

col = {
       '40001014002': c0,
       '40001014003': c1,
       '40001014004': c2,
       '40001014006': c3,
       '40001014007': c4,
       '40001014009': c5,
       '40001014010': c6,
       '40001014015': c7,
       '40001014016': c8,
       '40001014018': c9,
       '40001014020': c0,
       '40001014022': c1,
       '40001014023': c2
}
    
tt = []
ct = []
ee = []
sb = []
oo = []
cc = []
mt = []
for kk in cts.keys():
    tt.append(get_yrs(dates[kk]))
    ct.append(cts[kk][0])
    ee.append(cts[kk][1])
    sb.append(cts[kk][2])
    oo.append(off[kk[:-3]])
    cc.append(col[kk[:-3]])
    mt.append('o' if 'A' in kk else 's')

tt = np.array(tt)
ct = np.array(ct)
ee = np.array(ee)
sb = np.array(sb)
oo = np.array(oo)
cc = np.array(cc)
mt = np.array(mt)





################################################################
# Plots
plt.figure(figsize=(5, 3.75))
for ii, t in enumerate(tt):
    plt.errorbar(t, ct[ii], yerr=ee[ii], fmt=mt[ii], lw=1.5, color=cc[ii])

plt.ylabel('Number flux (s$^{-1}$)')
plt.xlabel('Time since explosion (d)')

plt.figure(figsize=(5, 3.75))
plt.scatter(oo, ct, s=20, c=cc)
plt.ylabel('Number flux (s$^{-1}$)')
plt.xlabel('Off-axis angle (arcmin)')

plt.figure(figsize=(5, 3.75))
plt.scatter(sb, ct, s=20, c=cc)
plt.ylabel('Number flux (s$^{-1}$)')
plt.xlabel('S/B')



################################################################
# Above is counts, below is flux

flx = {
       '40001014002A01': [-11.9821, -0.02766580, 0.02602780],
       '40001014002B01': [-11.9962, -0.02949570, 0.02764230],
       '40001014003A01': [-11.9815, -0.01889820, 0.01811700],
       '40001014003B01': [-11.9794, -0.01986970, 0.01900820],
       '40001014004A01': [-11.9861, -0.01557120, 0.01503610],
       '40001014004B01': [-11.9568, -0.01570070, 0.01515700],
       '40001014006A01': [-11.9474, -0.02947550, 0.02762460],
       '40001014006B01': [-11.9713, -0.03110200, 0.02904930],
       '40001014007A01': [-11.9556, -0.01485350, 0.01436570],
       '40001014007B01': [-11.9233, -0.01466650, 0.01419070],
       '40001014009A01': [-12.0440, -0.05010080, 0.04490890],
       '40001014009B01': [-11.9713, -0.04784530, 0.04308890],
       '40001014010A01': [-11.9452, -0.01526870, 0.01475390],
       '40001014010B01': [-11.9576, -0.01608520, 0.01551520],
       '40001014015A01': [-11.9416, -0.02185750, 0.02082020],
       '40001014015B01': [-11.8984, -0.02145400, 0.02045370],
       '40001014016A01': [-11.9027, -0.00967792, 0.00946471],
       '40001014016B01': [-11.8841, -0.00979043, 0.00957227],
       '40001014018A01': [-11.9254, -0.01479170, 0.01430790],
       '40001014018B01': [-11.9239, -0.01545490, 0.01492770],
       '40001014020A01': [-11.9314, -0.01228960, 0.01195340],
       '40001014020B01': [-11.9385, -0.01279590, 0.01243200],
       '40001014022A01': [-11.9161, -0.03115040, 0.02909150],
       '40001014022B01': [-11.9235, -0.03244330, 0.03021680],
       '40001014023A01': [-11.9100, -0.00958842, 0.00937911],
       '40001014023B01': [-11.9226, -0.01029070, 0.01004980]
}

       
ff = []
lo = []
up = []
for kk in flx.keys():
    tmp = flx[kk][0]
    ff.append(1e12*10**tmp)
    lo.append(1e12*(10**tmp-10**(tmp+flx[kk][1])))
    up.append(1e12*(10**(tmp+flx[kk][2])-10**tmp))

ff = np.array(ff)
lo = np.array(lo)
up = np.array(up)
yerr = np.concatenate((lo[:, np.newaxis].T, up[:, np.newaxis].T))



################################################################
# Plots
plt.figure(figsize=(5, 3.75))
for ii, t in enumerate(tt):
    plt.errorbar(t, ff[ii], yerr=yerr[:,ii:ii+1], fmt=mt[ii], lw=1.5, color=cc[ii])

plt.ylabel('Flux (erg~cm$^{-2}$~s$^{-1}$)')
plt.xlabel('Time since explosion (d)')

plt.figure(figsize=(5, 3.75))
plt.scatter(oo, ff, s=20, c=cc)
plt.ylabel('Flux (erg~cm$^{-2}$~s$^{-1}$)')
plt.xlabel('Off-axis angle (arcmin)')

plt.figure(figsize=(5, 3.75))
plt.scatter(sb, ff, s=20, c=cc)
plt.ylabel('Flux (erg~cm$^{-2}$~s$^{-1}$)')
plt.xlabel('S/B')

# plt.show()
plt.close('all')


################################################################
# The light curves
os.chdir('/Users/silver/box/phd/pro/87a/nus/dat')

files = sorted(glob('*.lc'))

f1 = plt.figure()
f2 = plt.figure()

for ii, ff in enumerate(files):
    dd = fits.open(ff)[1].data
    tt = dd['TIME']
    rr = dd['RATE']
    ee = dd['ERROR']

    nn = tt.size//3
    t = np.empty(3)
    r = np.empty(3)
    e = np.empty(3)
    
    for i in range(0,3):
        t[i] = np.average(tt[i*nn:(i+1)*nn])
        r[i] = np.average(rr[i*nn:(i+1)*nn])
        e[i] = np.sqrt(np.sum(ee[i*nn:(i+1)*nn]**2))/(ee[i*nn:(i+1)*nn].size-1)

    plt.figure(f2.number)
    plt.errorbar(t, r, yerr=e, fmt='o')
    t = np.average(tt)
    r = np.average(rr)
    e = np.sqrt(np.sum(ee**2))/(ee.size-1)
    plt.figure(f1.number)
    plt.errorbar(ii, r, yerr=e, fmt='o')
    if 'A' in ff:
        continue
    else:
        f2 = plt.figure()

plt.show()
db()
